package OOPs4ENCAPTULATION_Different_packageTEST;

public class ObjectDemo {
    int num;
    float val;

    public ObjectDemo(int num) {
        this.num = num;
    }
    ObjectDemo(int num, float val){
        this.num = num;
        this.val = val;
    }
//if we don't change the return of hashcode it will return a random value generated by an algorithm
    @Override
    public int hashCode() {
        //return super.hashCode();
        return num;
// but here we make it return the num itself
    }

    @Override
    public boolean equals(Object obj){
//        return super.equals(obj);
        return this.num == ((ObjectDemo)obj).num;
    }

    @Override
    protected Object clone() throws CloneNotSupportedException {
        return super.clone();
    }

    @Override
    public String toString() {
        return super.toString();
    }

//    @Override
//    protected void finalize() throws Throwable {
//        super.finalize();
//    }
    public static void main(String[] args) {
        ObjectDemo obj = new ObjectDemo(5);
        ObjectDemo obj1 = new ObjectDemo(5);
// for unchanged hash code function even same value will return different value
        ObjectDemo obj2 = obj1;
//here we reassigned the obj1 to obj3 so in original hash code fun this will return the same value
        System.out.println(obj.hashCode());
        System.out.println(obj1.hashCode());
        System.out.println(obj2.hashCode());

        ObjectDemo obj3 = new ObjectDemo(6, 77.4f);
        ObjectDemo obj4 = new ObjectDemo(6, 77.6f);

//        if(obj4 < obj3){           this will give error
//            System.out.println("obj3 is grater than obj4");
//        }
        if (obj3 == obj4){
            System.out.println("not appropriate to use & not display anything ");
        }
        if (obj4.equals(obj3)){
            System.out.println("this will also not display anything when we are using super.equals(obj)");
        }

        //method getClass()

        System.out.println(obj.getClass().getName());
    }
}
